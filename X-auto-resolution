#!/bin/bash
ProjectName='X-auto-resolution'
YELLOW='\033[0;33m'
NORMAL='\033[0m'
DRM='/sys/class/drm/*'
UseFullValues='Monitor name:|Manufacturer:|Maximum image size:|ASCII string:|Serial number:'

ConfigDir=~/.config/$ProjectName
mkdir -p "$ConfigDir"||ConfigDir='./'
cd "$ConfigDir" #for reading ConfigFile

function Notify_First_Second(){
[ -z $Quet ]&&notify-send "$First" "$Second"
}

function MD5SUM(){ MD5Hash=`md5sum "$1"`;echo ${MD5Hash%% *}; }

function resolution(){
[ -n "$Debug" ]&&echo -e ${YELLOW} resolution 1=$1 2=$2 3=$3 ${NORMAL}>&2
K=$(cvt $1 $2 $3)||return 1
K=${K#*Modeline };K=${K//\"/}
xrandr --newmode $K 2>/dev/null
K=${K%% *} #get name for mode

  xrandr --addmode $Output $K
  xrandr --output $Output --mode $K && Second=$Second' '$K&&
  echo mode $K applied to $Output "($MonitorName)"
}

function GetConfigFileForOutputfolder(){
EDIDfile=$OutputFolder/edid
[ -r "$EDIDfile" ]||return 1
ConfigFile=`MD5SUM "$EDIDfile"`||return 1
}

function GetOutputForOutputfolder(){
Output=$(basename $OutputFolder)
Output=${Output#card*-}
[ -z "$Output" ]&&return 1
Output=${Output%%-*}${Output##*-}
}


function GetCurrentConnected(){
[ -n "$Debug" ]&&echo -e ${YELLOW} GetCurrentConnected ${NORMAL} >&2
xrandr &>/dev/null
CurrentConnected=''
for A in $DRM/status;do
  [ 'connected' = `cat "$A"` ]&& CurrentConnected=$CurrentConnected`dirname "$A"`$'\n'
done
echo Current Connected:
echo "$CurrentConnected"
}

function GetNewConnected(){
[ -n "$Debug" ]&&echo -e ${YELLOW} GetNewConnected ${NORMAL}
PrevConnected=$CurrentConnected
#echo 'Prev Connected:'
#echo "$PrevConnected"
NewConnected=''
GetCurrentConnected
for A in $CurrentConnected;do
grep $A <<<$PrevConnected &>/dev/null || NewConnected=$NewConnected$A$'\n'
done
echo 'New Connected:'
echo "$NewConnected"
}

function GetMonitorNameFromOutputFolder(){
[ -n "$Debug" ]&&echo -e ${YELLOW} GetMonitorNameFromOutputFolder ${NORMAL} >&2
MonitorName=`edid-decode $OutputFolder/edid|grep -E "Monitor name:"`
MonitorName=${MonitorName#*Monitor name: }
}

function RunConfigFile(){
[ -n "$Debug" ]&&echo -e ${YELLOW} RunConfigFile "$ConfigFile" ${NORMAL} >&2
while read ConfigLine;do $ConfigLine;done < "$ConfigFile"
#XFCE bug escape
[ $XDG_CURRENT_DESKTOP = XFCE ]&&nohup xfwm4 --replace &>/dev/null &
}

function GetResolutionAndRefreshRateOfOutput(){
[ -n "$Debug" ]&&echo -e ${YELLOW} GetResolutionAndRefreshRateOfOutput ${NORMAL}
Resolution='';RefreshRate=''
BIFS=$IFS
IFS=''
while [ -z "$Resolution" -a -z "$RefreshRate" ]&& read K;do
  if [ "$Output" = "${K%% *}" ];then
    Resolution=$(echo "$K"|grep -i "$Output"' connected'|grep -oE '[0-9]+x[0-9]+');
	Resolution=${Resolution//x/ };
    while [ -z "$RefreshRate" ]&& read K&& [ ' ' = ${K:0:1} ];do
	  [[ "$K" =~ '*' ]]&&{ [ -n "$Debug" ]&&echo -e ${YELLOW} $K ${NORMAL} >&2;
	    K=${K%%\**};RefreshRate=${K##* };IFS=$BIFS;return; }
	done
  fi
done<<<`xrandr`
IFS=$BIFS
[ -z "$Resolution" ]&&return 1
 }

function OnMonitorEvent(){
[ -n "$Debug" ]&&echo -e ${YELLOW} OnMonitorEvent ${NORMAL} >&2
GetNewConnected                      
for OutputFolder in $NewConnected;do
  GetOutputForOutputfolder;GetConfigFileForOutputfolder
  GetMonitorNameFromOutputFolder
  #read config if exist
  [ -r "$ConfigFile" ]&&
  RunConfigFile &&
  First=$ProjectName && Second=$MonitorName"($Output) "$Second &&
  Notify_First_Second || 
  { echo 'no config found for' $MonitorName "($Output)"; }
done
}

function Watching(){
[ -n "$Debug" ]&&echo -e ${YELLOW} Watching ${NORMAL} >&2
  #start watching
stdbuf -i0 -o0 -e0 udevadm monitor -u -s drm|{ read;read;read
  while read;do
    sleep 5 #Some TV's report the edid file after a few seconds. 
    OnMonitorEvent
  done
}
}

function List(){
[ -n "$Debug" ]&&echo -e ${YELLOW} List of connected ${NORMAL} $'\n'  >&2
GetCurrentConnected
for OutputFolder in $CurrentConnected;do
GetOutputForOutputfolder
GetResolutionAndRefreshRateOfOutput
GetMonitorNameFromOutputFolder
GetConfigFileForOutputfolder;
[ -r "$ConfigFile" ]||ConfigFile=''
echo $Output "($MonitorName)" $ConfigFile':'
echo resolution "$Resolution" "$RefreshRate"
edid-decode $EDIDfile|grep -E "$UseFullValues"
echo ''
done
}

function FindOutputFolderForTargetOutput(){
[ -n "$Debug" ]&&echo -e ${YELLOW} FindOutputFolderForTargetOutput TargetOutput=$TargetOutput ${NORMAL} >&2
for OutputFolder in $DRM;do
  GetOutputForOutputfolder
  grep -i "^$TargetOutput$">/dev/null <<<"$Output"&& return
done
return 1
}

function WriteConfigFile(){
touch "$ConfigFile"||return 1
[ -n "$Resolution" ]&& echo resolution "$Resolution" "$RefreshRate">"$ConfigFile"
  
echo success save config file "$ConfigFile"
}

function Save(){
[ -n "$Debug" ]&&echo -e ${YELLOW} save TargetOutput=$TargetOutput ${NORMAL} >&2
[ -z "$TargetOutput" ]&&{ echo specify output to save monitor config e.g. HDMI1 >&2;return 1; } 
XrandrAnswer=`xrandr`
FindOutputFolderForTargetOutput||{ echo 'unable to find output' >&2;return 1; }
#Output defined in FindOutputFolderForTargetOutput
GetResolutionAndRefreshRateOfOutput||{ echo 'unable to find resolution' >&2;return 1; }
echo determined resolution "$Resolution" "$RefreshRate"
GetConfigFileForOutputfolder||{ echo 'unable to define config file' >&2;return 1; }
WriteConfigFile
}

function usage(){
echo "This script watch the connections of the video outputs and applies the resolution stored in configuration's file. The configuration file is named as an monitor edid file hash. Also shows a notification."

echo "	--list		write list for connected outputs and monitor's edid file info"
echo "	--save		save monitor's config for specified output e.g. HDMI1"
echo "	--delete	delete monitor's config for specified output"
echo '	--applyonly	run configs for currently connected monitors and exit'
echo '	--onlynew	run config files only for new connected monitors'
echo '	--quet		no notify-send when run config'
echo '	--debug		output debug information'

}

function DeleteConfigFile(){
if [ -f "$ConfigFile" ];then
rm -fv "$ConfigFile" # && echo success save config file `basename "$ConfigFile"`
else 
echo no config file;return 1
fi
[ -n "$Resolution" ]&& echo resolution "$Resolution" "$RefreshRate">"$ConfigFile"
}

function DeleteConfig(){
[ -n "$Debug" ]&&echo -e ${YELLOW} Delete Config for TargetOutput=$TargetOutput ${NORMAL} >&2
[ -z "$TargetOutput" ]&&{ echo specify output to delete monitor config e.g. HDMI1 >&2;return 1; } 
XrandrAnswer=`xrandr`
FindOutputFolderForTargetOutput||{ echo 'unable to find output' >&2;return 1; }
GetConfigFileForOutputfolder||{ echo 'unable to define config file' >&2;return 1; }
DeleteConfigFile||return $?
}


check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm="$1"
        shift

        case "$parm" in
		    --debug) Debug=y;;
			--quet) Quet=y;;
            --applyonly) ApplyOnly=y;;			
			--onlynew) OnlyNew=y;;			
			--list) ListOnly=y;;			
			--save) TargetOutput=$1;Onlysave=y;;			
			--delete) TargetOutput=$1;Deleteonly=y;;
			--help) usage;exit;;
        esac
    done
}


#-------------------------------Body
check_common_commands "$@"

#debug
[ -n "$Debug" ]&&echo -e ${YELLOW} PID=$$ >&2
[ -n "$Debug" ]&&echo -e ${YELLOW} ConfigDir="$ConfigDir" >&2
#
[ -n "$ListOnly" ]&&{ List;exit; }
[ -n "$Onlysave" ]&&{ Save;exit; }
[ -n "$Deleteonly" ]&&{ DeleteConfig;exit; }
[ -n "$ApplyOnly" ]&&{ OnMonitorEvent;exit; }
[ -n "$OnlyNew" ]&&GetCurrentConnected

Watching
